package cn.baymax.mac01;import java.util.Arrays;//https://leetcode.cn/problems/split-array-largest-sum///410public class Code06_SplitArrayLargestNum {    /**     * 410     * https://leetcode.cn/problems/split-array-largest-sum/     * 给定一个非负整数数组nums和一个整数m，     * 你需要将这个数组分成m个非空的连续子数组。     * 设计一个算法使得这m个子数组各自和的最大值最小     *///一共有四种方法将 nums 分割为 2 个子数组。//其中最好的方式是将其分为 [7,2,5] 和 [10,8] 。    public int splitArray(int[] nums, int k) {        //排序数组，获取分配规则中最小、最大值        long min = 0;        long max = 0;        long ans = min;        for (int num : nums) {            min = Math.max(min, num);            max += num;        }        //二分查找        while (min <= max) {            long mid = (min + (max - min) / 2);            if (getNeedPart(nums, mid) <= k) {                ans = mid;                max = mid - 1;                // min 5  max 10  mid 7            } else {                min = mid + 1;            }        }        return (int) ans;    }    private long getNeedPart(int[] nums, long mid) {        long ans = 1;        long currentSum = 0;        for (int i = 0; i < nums.length; i++) {            int current = nums[i];            if (currentSum + current > mid) {                currentSum = current;                ans++;            } /*else if(currentSum + current == mid){                currentSum = 0;                ans++;            }*/else  {                currentSum += current;            }        }//        if(currentSum > 0) ans++;        return ans;    }    public static void main(String[] args) {        int[] nums = {7, 2, 5, 10, 8};        int k = 2;        Code06_SplitArrayLargestNum obj = new Code06_SplitArrayLargestNum();        int i = obj.splitArray(nums, k);        System.out.println(i);    }}